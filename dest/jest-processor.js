// Generated by CoffeeScript 1.9.3
var Json, babel, babelJest, coffee, fs, path;

coffee = require('coffee-script');

Json = require('json5');

fs = require('fs');

babel = require('babel-core');

path = require('path');

babelJest = new ((function() {
  function _Class() {
    this.babelrc = this.resolveRc();
  }

  _Class.prototype.resolveRc = function() {
    var content, root;
    root = __dirname.split(/\bnode_modules\b/).slice(0, -1).join('node_modules');
    try {
      content = fs.readFileSync(path.join(root, '.babelrc'), 'utf-8');
      return Json.parse(content);
    } catch (_error) {
      return {};
    }
  };

  _Class.prototype.shouldIgnore = function(filename) {
    var ignore, only;
    if (this.babelrc.ignore) {
      ignore = babel.util.arrayify(this.babelrc.ignore, babel.util.regexify);
    }
    if (this.babelrc.only) {
      only = babel.util.arrayify(this.babelrc.only, babel.util.regexify);
    }
    if (!(ignore || only)) {
      return filename.split(path.sep).indexOf("node_modules") >= 0;
    } else {
      return babel.util.shouldIgnore(filename, ignore || [], only);
    }
  };

  _Class.prototype.process = function(src, filename) {
    var stage;
    stage = process.env.BABEL_JEST_STAGE || this.babelrc.stage || 2;
    if (!this.shouldIgnore(filename) && babel.canCompile(filename)) {
      return babel.transform(src, {
        filename: filename,
        stage: stage,
        retainLines: true
      }).code;
    } else {
      return src;
    }
  };

  return _Class;

})());

module.exports = {
  process: function(src, path) {
    if (coffee.helpers.isCoffee(path)) {
      return coffee.compile(src, {
        'bare': true
      });
    } else {
      return babelJest.process(src, path);
    }
  }
};
