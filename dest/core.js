// Generated by CoffeeScript 1.9.2

/**
 * detect the type of target is compatible with the type of base
 * @param  {any} base      
 * @param  {any} target      
 * @outparam  {(string) => false} onFalse
 * @innerparam {string} path: in order to keep running fast, here we use tmp variable
 * @return {bool}
 */
var compatibleType;

compatibleType = function(base, target, onFalse, path) {
  var i, j, k, key, ref, value;
  if (Array.isArray(base)) {
    if (!Array.isArray(target)) {
      onFalse(path);
      return false;
    }
    for (i = j = base.length - 1; j >= 0; i = j += -1) {
      value = base[i];
      if (!compatibleType(value, target[i], onFalse, path + "[" + i + "]")) {
        return false;
      }
    }
    return true;
  } else if (base === null) {
    if (target === null) {
      return true;
    } else {
      onFalse(path);
      return false;
    }
  } else if ('object' === typeof base) {
    if (!('object' === typeof target && null !== target)) {
      onFalse(path);
      return false;
    }
    ref = Object.keys(base);
    for (i = k = ref.length - 1; k >= 0; i = k += -1) {
      key = ref[i];
      if (!compatibleType(base[key], target[key], onFalse, path + "." + key)) {
        return false;
      }
    }
    return true;
  } else if (typeof base === typeof target) {
    return true;
  } else {
    onFalse(path);
    return false;
  }
};


/**
 * detect the type of target is compatible with the type of base
 * @param  {any}  base
 * @param  {any}  target 
 * @return {isCompatible: bool, path?: string}
 */

module.exports = function(base, target) {
  var onFalse, ret;
  ret = {};
  onFalse = function(path) {
    return ret.path = path;
  };
  ret.isCompatible = compatibleType(base, target, onFalse, '');
  return ret;
};
